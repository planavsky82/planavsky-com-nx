/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { LoginEvent } from "./components/planit-login/planit-login";
import { Navigation, NavigationItem } from "./models/navigation";
import { SignUpEvent } from "./components/planit-signup/planit-signup";
export { LoginEvent } from "./components/planit-login/planit-login";
export { Navigation, NavigationItem } from "./models/navigation";
export { SignUpEvent } from "./components/planit-signup/planit-signup";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface PlanitButton {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface PlanitButtonLegacy {
        "type": 'button' | 'submit' | 'reset';
    }
    interface PlanitCollection {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface PlanitContainer {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface PlanitError {
        "inline": boolean;
    }
    interface PlanitLogin {
        "labelEmailAddress": string;
        "labelPassword": string;
    }
    interface PlanitModal {
        "opened": boolean;
    }
    interface PlanitNav {
        "data": Navigation;
        "route": string;
    }
    interface PlanitPwaIndicator {
        "display": boolean;
        "image": string;
    }
    interface PlanitReadMore {
    }
    interface PlanitSignup {
        "labelEmailAddress": string;
        "labelPassword1": string;
        "labelPassword2": string;
    }
}
export interface PlanitLoginCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPlanitLoginElement;
}
export interface PlanitModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPlanitModalElement;
}
export interface PlanitNavCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPlanitNavElement;
}
export interface PlanitSignupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPlanitSignupElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLPlanitButtonElement extends Components.PlanitButton, HTMLStencilElement {
    }
    var HTMLPlanitButtonElement: {
        prototype: HTMLPlanitButtonElement;
        new (): HTMLPlanitButtonElement;
    };
    interface HTMLPlanitButtonLegacyElement extends Components.PlanitButtonLegacy, HTMLStencilElement {
    }
    var HTMLPlanitButtonLegacyElement: {
        prototype: HTMLPlanitButtonLegacyElement;
        new (): HTMLPlanitButtonLegacyElement;
    };
    interface HTMLPlanitCollectionElement extends Components.PlanitCollection, HTMLStencilElement {
    }
    var HTMLPlanitCollectionElement: {
        prototype: HTMLPlanitCollectionElement;
        new (): HTMLPlanitCollectionElement;
    };
    interface HTMLPlanitContainerElement extends Components.PlanitContainer, HTMLStencilElement {
    }
    var HTMLPlanitContainerElement: {
        prototype: HTMLPlanitContainerElement;
        new (): HTMLPlanitContainerElement;
    };
    interface HTMLPlanitErrorElement extends Components.PlanitError, HTMLStencilElement {
    }
    var HTMLPlanitErrorElement: {
        prototype: HTMLPlanitErrorElement;
        new (): HTMLPlanitErrorElement;
    };
    interface HTMLPlanitLoginElement extends Components.PlanitLogin, HTMLStencilElement {
    }
    var HTMLPlanitLoginElement: {
        prototype: HTMLPlanitLoginElement;
        new (): HTMLPlanitLoginElement;
    };
    interface HTMLPlanitModalElement extends Components.PlanitModal, HTMLStencilElement {
    }
    var HTMLPlanitModalElement: {
        prototype: HTMLPlanitModalElement;
        new (): HTMLPlanitModalElement;
    };
    interface HTMLPlanitNavElement extends Components.PlanitNav, HTMLStencilElement {
    }
    var HTMLPlanitNavElement: {
        prototype: HTMLPlanitNavElement;
        new (): HTMLPlanitNavElement;
    };
    interface HTMLPlanitPwaIndicatorElement extends Components.PlanitPwaIndicator, HTMLStencilElement {
    }
    var HTMLPlanitPwaIndicatorElement: {
        prototype: HTMLPlanitPwaIndicatorElement;
        new (): HTMLPlanitPwaIndicatorElement;
    };
    interface HTMLPlanitReadMoreElement extends Components.PlanitReadMore, HTMLStencilElement {
    }
    var HTMLPlanitReadMoreElement: {
        prototype: HTMLPlanitReadMoreElement;
        new (): HTMLPlanitReadMoreElement;
    };
    interface HTMLPlanitSignupElement extends Components.PlanitSignup, HTMLStencilElement {
    }
    var HTMLPlanitSignupElement: {
        prototype: HTMLPlanitSignupElement;
        new (): HTMLPlanitSignupElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "planit-button": HTMLPlanitButtonElement;
        "planit-button-legacy": HTMLPlanitButtonLegacyElement;
        "planit-collection": HTMLPlanitCollectionElement;
        "planit-container": HTMLPlanitContainerElement;
        "planit-error": HTMLPlanitErrorElement;
        "planit-login": HTMLPlanitLoginElement;
        "planit-modal": HTMLPlanitModalElement;
        "planit-nav": HTMLPlanitNavElement;
        "planit-pwa-indicator": HTMLPlanitPwaIndicatorElement;
        "planit-read-more": HTMLPlanitReadMoreElement;
        "planit-signup": HTMLPlanitSignupElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface PlanitButton {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface PlanitButtonLegacy {
        "type"?: 'button' | 'submit' | 'reset';
    }
    interface PlanitCollection {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface PlanitContainer {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface PlanitError {
        "inline"?: boolean;
    }
    interface PlanitLogin {
        "labelEmailAddress"?: string;
        "labelPassword"?: string;
        "onSubmitLogin"?: (event: PlanitLoginCustomEvent<LoginEvent>) => void;
    }
    interface PlanitModal {
        "onClosed"?: (event: PlanitModalCustomEvent<boolean>) => void;
        "opened"?: boolean;
    }
    interface PlanitNav {
        "data"?: Navigation;
        "onSelectItem"?: (event: PlanitNavCustomEvent<NavigationItem>) => void;
        "route"?: string;
    }
    interface PlanitPwaIndicator {
        "display"?: boolean;
        "image"?: string;
    }
    interface PlanitReadMore {
    }
    interface PlanitSignup {
        "labelEmailAddress"?: string;
        "labelPassword1"?: string;
        "labelPassword2"?: string;
        "onSubmitSignup"?: (event: PlanitSignupCustomEvent<SignUpEvent>) => void;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "planit-button": PlanitButton;
        "planit-button-legacy": PlanitButtonLegacy;
        "planit-collection": PlanitCollection;
        "planit-container": PlanitContainer;
        "planit-error": PlanitError;
        "planit-login": PlanitLogin;
        "planit-modal": PlanitModal;
        "planit-nav": PlanitNav;
        "planit-pwa-indicator": PlanitPwaIndicator;
        "planit-read-more": PlanitReadMore;
        "planit-signup": PlanitSignup;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "planit-button": LocalJSX.PlanitButton & JSXBase.HTMLAttributes<HTMLPlanitButtonElement>;
            "planit-button-legacy": LocalJSX.PlanitButtonLegacy & JSXBase.HTMLAttributes<HTMLPlanitButtonLegacyElement>;
            "planit-collection": LocalJSX.PlanitCollection & JSXBase.HTMLAttributes<HTMLPlanitCollectionElement>;
            "planit-container": LocalJSX.PlanitContainer & JSXBase.HTMLAttributes<HTMLPlanitContainerElement>;
            "planit-error": LocalJSX.PlanitError & JSXBase.HTMLAttributes<HTMLPlanitErrorElement>;
            "planit-login": LocalJSX.PlanitLogin & JSXBase.HTMLAttributes<HTMLPlanitLoginElement>;
            "planit-modal": LocalJSX.PlanitModal & JSXBase.HTMLAttributes<HTMLPlanitModalElement>;
            "planit-nav": LocalJSX.PlanitNav & JSXBase.HTMLAttributes<HTMLPlanitNavElement>;
            "planit-pwa-indicator": LocalJSX.PlanitPwaIndicator & JSXBase.HTMLAttributes<HTMLPlanitPwaIndicatorElement>;
            "planit-read-more": LocalJSX.PlanitReadMore & JSXBase.HTMLAttributes<HTMLPlanitReadMoreElement>;
            "planit-signup": LocalJSX.PlanitSignup & JSXBase.HTMLAttributes<HTMLPlanitSignupElement>;
        }
    }
}
